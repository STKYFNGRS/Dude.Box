# DUDE.BOX CODING STANDARDS
Last Updated: November 29, 2024

## SDK INTEGRATION

1. SDK Usage
-----------
- Use SDK functionality directly
- Avoid custom implementations of SDK features
- Trust SDK's built-in error handling
- Use SDK's type definitions

2. Configuration
--------------
- Use APP_CONFIG for SDK initialization
- Maintain consistent app naming/branding
- Keep configuration centralized

3. State Management
-----------------
- Keep state minimal and focused
- Trust SDK's internal state
- Clear state transitions
- Simple error handling

## TYPESCRIPT PRACTICES

1. Types
-------
- Keep interfaces simple
- Match SDK type definitions
- Avoid unnecessary type complexity
- Use type inference where appropriate

2. Error Handling
---------------
- Use TypeScript for error prevention
- Clear error state management
- Proper error typing
- Informative error messages

## COMPONENTS

1. Structure
----------
- Clear separation of concerns
- Simple, focused components
- Trust SDK for complex operations
- Minimal state management

2. Props
-------
- Clear prop interfaces
- Required vs optional props
- Prop validation where needed
- Default prop values

## TESTING

1. Unit Tests
-----------
- Test component rendering
- Test state transitions
- Mock SDK responses
- Error handling tests

2. Integration Tests
-----------------
- Test SDK integration
- Connection flows
- Error scenarios
- State management

## CODE ORGANIZATION

1. File Structure
---------------
/app
  /components
    /wallet        # Wallet-related components
  /context         # React context providers
  /config          # Configuration files
  /types          # TypeScript types

2. Naming Conventions
-------------------
- PascalCase for components
- camelCase for functions
- UPPER_CASE for constants
- kebab-case for files

## DOCUMENTATION

1. Code Comments
--------------
- Document complex logic
- Explain SDK usage
- Note error handling
- Document state management

2. Type Documentation
------------------
- Document interfaces
- Explain type constraints
- Note SDK types usage
- Document type extensions

## BEST PRACTICES

1. SDK Integration
----------------
✓ Use SDK directly
✗ Don't create custom implementations
✓ Trust SDK features
✗ Don't track SDK-managed state

2. State Management
----------------
✓ Minimal state
✓ Clear transitions
✓ Simple error handling
✗ Don't duplicate SDK state

3. Component Design
----------------
✓ Simple, focused components
✓ Clear props interface
✓ Proper error handling
✗ Don't manage SDK features