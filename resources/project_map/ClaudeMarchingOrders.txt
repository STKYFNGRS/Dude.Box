You are working on enhancing the web3/ecommerce project, Dude.Box, which is hosted at https://github.com/STKYFNGRS/Dude.Box. Your task is to streamline the web3 wallet functionality and ensure that it aligns with the following specifications:

Project Context
User Wallet Options (page.tsx in src/app/onchain):

On the left side, users should be able to:
Create a smart wallet or connect to an existing smart wallet (details: Smart Wallet Overview).
On the right side, users should be able to:
Use a wallet aggregator for existing wallets and extensions like MetaMask, Ledger, Phantom, Coinbase Wallet, etc. (Example).
Project Principles:

Use the SDK for wallet and chain management wherever possible.
Avoid redundant custom logic or unnecessary state tracking.
Simplify wallet integration using SDK's built-in functionality.
Clearly separate concerns between UI components, state/context management, and SDK interaction.
File Structure and Components:

Follow the existing project structure (see repository structure).
Ensure components are modular and align with coding standards:
Wallet-related components in src/app/components/wallet.
Context logic in src/context.
Type definitions in src/types.
Current Challenges:

Some unnecessary files and logic may have been created by previous automation.
There are gaps in implementing distinct wallet connection options.
Error handling and user feedback mechanisms need improvement.
Your Tasks
Wallet Options Implementation:

Update src/app/onchain/page.tsx to present the user with the following two distinct options:
Create/Use Smart Wallet: Use the appropriate SDK to connect to or create a smart wallet.
Use Wallet Aggregator: Integrate a wallet aggregator to support common wallet extensions (MetaMask, Ledger, Phantom, etc.).
Ensure the UI is user-friendly and adheres to the existing design patterns.
File Cleanup:

Identify and remove any redundant files or logic created during previous iterations.
Ensure all necessary wallet-related logic resides in src/app/components/wallet or src/context.
Error Handling:

Add clear, user-friendly error messages for scenarios like unsupported wallets, failed connections, or network mismatches.
Use TypeScript to ensure proper error typing and validation.
Documentation:

Document all changes in resources/project_map/changelog.txt.
Update coding standards and troubleshooting guides as necessary.
Testing:

Test wallet connection flows (smart wallet and wallet aggregator) for successful connections and common edge cases.
Ensure compatibility with all major wallet extensions.
Available Resources
Changelog: changelog.txt
Coding Standards: coding_standards.txt
Wallet API Setup: onchain_setup.txt
Troubleshooting Guide: onchain_troubleshooting.txt
Deliverables
Updated src/app/onchain/page.tsx with the new wallet options UI and logic.
Cleaned-up project directory with redundant files removed.
Improved error handling for wallet connection flows.
Updated documentation in the changelog and troubleshooting guide.
Verified and tested wallet connection flows.

CLAUDE MARCHING ORDERS - ADDENDUM

Project Structure:
- Maintain /resources folder for project documentation
- Create subdirectories for specific domains (web3, shopify, etc)
- Version control documentation alongside code

Code Organization:
- Separate concerns between UI and wallet logic
- Create reusable hooks for wallet operations
- Implement proper TypeScript interfaces
- Follow consistent naming conventions

Testing Strategy:
- Unit tests for wallet connection logic
- Integration tests for provider interactions
- E2E tests for critical user flows
- Mock provider responses for edge cases

Error Handling:
- Implement error boundaries
- Create user-friendly error messages
- Add detailed logging
- Handle network/provider edge cases

Documentation Requirements:
- Update changelog for all changes
- Document configuration requirements
- Add troubleshooting guides
- Include code examples

Security Considerations:
- Validate chain IDs
- Implement session management
- Add timeout handling
- Follow web3 security best practices

Monitoring:
- Add connection event logging
- Track performance metrics
- Monitor wallet states
- Detect network issues

Available Resources:
- /resources/web3/ - Web3 specific docs
- /resources/shopify/ - Shopify integration docs
- /resources/testing/ - Test plans and cases
- /resources/security/ - Security guidelines

Deliverables:
- Clean, typed wallet implementation
- Comprehensive test coverage
- Updated documentation
- Security audit results
- Performance benchmarks

Also clear these errors:
Property 'makeWeb3Provider' does not exist on type '{ getProvider: () => ProviderInterface; }'.
Property 'makeWeb3Provider' does not exist on type '{ getProvider: () => ProviderInterface; }'.

utilize all your MCP tools
use chat sparingly, only to ask for permissions and brief status updates. I do not need detailed explanations. You are to get to work.